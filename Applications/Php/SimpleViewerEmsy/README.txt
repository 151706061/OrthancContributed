Contribution from Emsy Chan <emlscs@yahoo.com> on 2014-09-15
============================================================


Hi!

<begin rambling>I know basic Javascript / PHP and nothing about (insert just about every other programming language here). Being a radiologist, imagine my excitement at being able to talk to a Dicom server using HTTP! So began my journey into figuring out how to make use of Orthanc...<end rambling>

I wrote a (what I think is) a simple Javascript / HTML5 / PHP viewer for Orthanc that runs on Apache / PHP (+/- Imagemagick). It works in Chrome + Safari. 

All it needs is to know the Orthanc server address in viewer.php & pngToGray.php, and for viewer.php to GET a ?series={seriesUUID}. Then, after a long time (a 7 second start-up on Orthanc 0.8.3) you will get an image that you can window and pan. If it's a 30-slice stack of a CT Brain, you will need another 50s to complete loading the entire stack, although you can scroll/ window/ pan whatever has been loaded.

The code is messy and un-optimized. You can LOL, but please try not to ROTFL...

Basically, this is what happens:
- get the series-UUID in Orthanc that you want to view (easiest way is to look at the address bar in Orthanc Explorer)
- give a series-UUID (using HTTP-GET) of a series you want to view to viewer.php
- viewer.php will use the series/{id}/instances to retrieve the list of instance-UUIDs and corresponding instanceNumbers
- viewer.php will send the instance-UUIDs and corresponding instanceNumbers to 4 web-workers (bgLoadOdd.js, bgLoadOddTwo.js, bgLoadEven.js and bgLoadEvenTwo.js)
- the web-workers will call on pngToGray.php with the instance-UUIDs one by one
- pngToGray.php will retrieve the 16-bit PNG from orthanc using /instances/{id}/uint-16
- if the PNG file dimension is greater than 1000pixels in any direction, it is scaled using exec(imagemagick). If not for this, imagemagick is not required. GD2 is not compatible with 16-bit PNGs.
- pngToGray.php will parse the PNG and extract the compressed + filtered data in the IDATs, and perform decompression and unfiltering
- pngToGray.php will return a gzip compressed base 64-encoded string containing the image data to the web-workers
- web-workers will return the image data to viewer.php, which will keep it in an array
- viewer.php will uncompress the image data (using jsxcompressor http://jsxgraph.uni-bayreuth.de/wp/jsxcompressor/)
- viewer.php will reduce the 12-bit grayscale to 8-bit (HTML5 canvas compatible) grayscale and draw it in the canvas
- viewer.php catches the mouse events to scroll, pan and change windowing (zooming not implemented yet)

The big "flaw" is that my script relies on decoding the 16-bit grayscale PNG generated by {id}/uint-16. It can't read the dicom pixelData directly, because I don't know how to do it.

Attached are the files: ($orthancAddress needs to be configured in viewer.php and pngToGray.php. Imagemagick is optional and can be commented out in pngToGray.php)
- viewer.php (usage viewer.php?series={seriesUUID})
- pngToGray.php
- 4 web-workers (bgLoadOdd.js, bgLoadOddTwo.js, bgLoadEven.js, bgLoadEvenTwo.js)
- jsxcompressor.min.js (from http://jsxgraph.uni-bayreuth.de/wp/jsxcompressor/)

Regards,
Emsy

p.s. I call the viewer mcdcm ... get it, m.c.d.c.m? emsy-dicom? ... oh nevermind...
